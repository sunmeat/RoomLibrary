ПКМ по пакету, New > Other > Content Provider

WordContentProvider.java:

package com.sunmeat.room;

import android.content.ContentProvider;
import android.content.ContentUris;
import android.content.ContentValues;
import android.content.UriMatcher;
import android.database.Cursor;
import android.net.Uri;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

public class WordContentProvider extends ContentProvider {

    public static final String AUTHORITY = "com.sunmeat.room.provider";
    public static final Uri CONTENT_URI = Uri.parse("content://" + AUTHORITY + "/words");

    private static final int WORDS = 1;
    private static final int WORD_ID = 2;

    private static final UriMatcher uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);

    static {
        uriMatcher.addURI(AUTHORITY, "words", WORDS);
        uriMatcher.addURI(AUTHORITY, "words/#", WORD_ID);
    }

    private WordDao wordDao;

    @Override
    public boolean onCreate() {
        WordRoomDatabase database = WordRoomDatabase.getDatabase(getContext());
        wordDao = database.wordDao();
        return true;
    }

    @Nullable
    @Override
    public Cursor query(@NonNull Uri uri, @Nullable String[] projection, @Nullable String selection,
                        @Nullable String[] selectionArgs, @Nullable String sortOrder) {
        Cursor cursor;
        if (uriMatcher.match(uri) == WORDS) {
            cursor = wordDao.getAllWordsCursor();
        } else {
            throw new IllegalArgumentException("Unknown URI: " + uri);
        }
        cursor.setNotificationUri(getContext().getContentResolver(), uri);
        return cursor;
    }

    @Nullable
    @Override
    public String getType(@NonNull Uri uri) {
        if (uriMatcher.match(uri) == WORDS) {
            return "vnd.android.cursor.dir/vnd." + AUTHORITY + ".words";
        } else {
            return null;
        }
    }

    @Nullable
    @Override
    public Uri insert(@NonNull Uri uri, @Nullable ContentValues values) {
        if (uriMatcher.match(uri) == WORDS) {
            String wordText = values.getAsString("word");
            if (wordText != null) {
                Word word = new Word(wordText);
                wordDao.insert(word);
                getContext().getContentResolver().notifyChange(uri, null);
                return ContentUris.withAppendedId(CONTENT_URI, wordText.hashCode());
            }
        }
        throw new IllegalArgumentException("Invalid URI: " + uri);
    }

    @Override
    public int delete(@NonNull Uri uri, @Nullable String selection, @Nullable String[] selectionArgs) {
        if (uriMatcher.match(uri) == WORDS) {
            wordDao.deleteAll();
            getContext().getContentResolver().notifyChange(uri, null);
            return 1;
        }
        throw new IllegalArgumentException("Invalid URI: " + uri);
    }

    @Override
    public int update(@NonNull Uri uri, @Nullable ContentValues values, @Nullable String selection,
                      @Nullable String[] selectionArgs) {
        throw new UnsupportedOperationException("Update operation is not supported");
    }
}

==================================================================================================================

WordDao.java:

@Dao
public interface WordDao {
    @Insert
    void insert(Word word);

    @Query("DELETE FROM word_table")
    void deleteAll();

    @Query("SELECT * from word_table ORDER BY word ASC")
    LiveData<List<Word>> getAllWords();

    @Query("SELECT * FROM word_table WHERE word = :word")
    Word getWord(String word);

    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    @Query("SELECT * FROM word_table ORDER BY word ASC")
    Cursor getAllWordsCursor();
    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
}

==================================================================================================================

AndroidManifest.xml:

...
   <provider
            android:name=".WordContentProvider"
            android:authorities="com.sunmeat.room.provider"
            android:enabled="true"
            android:grantUriPermissions="true"
            android:exported="true"
            tools:ignore="ExportedContentProvider" />
...

==================================================================================================================

запрос данных из других приложений:

Uri CONTENT_URI = Uri.parse("content://com.sunmeat.room.provider/words");

Cursor cursor = getContentResolver().query(CONTENT_URI, null, null, null, null);
if (cursor != null) {
    while (cursor.moveToNext()) {
        String word = cursor.getString(cursor.getColumnIndexOrThrow("word"));
        Log.d("ContentProvider", "Word: " + word);
    }
    cursor.close();
} else {
    Log.e("ContentProvider", "Cursor is null. Cannot fetch data.");
}